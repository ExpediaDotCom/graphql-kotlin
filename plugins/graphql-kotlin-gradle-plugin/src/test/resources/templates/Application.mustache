package com.example

import com.example.generated.JUnitQuery
import com.expediagroup.graphql.client.GraphQLClient
import io.ktor.client.features.defaultRequest
import io.ktor.client.request.header
import kotlinx.coroutines.runBlocking
import java.net.URL

fun main() {
    {{^defaultHeader}}
        val client = GraphQLClient(URL(System.getProperty("graphQLEndpoint")))
    {{/defaultHeader}}
    {{#defaultHeader}}
        val client = GraphQLClient(URL(System.getProperty("graphQLEndpoint"))) {
            defaultRequest {
                header("{{name}}", "{{value}}")
            }
        }
    {{/defaultHeader}}
    val query = JUnitQuery(client)

    val variables = JUnitQuery.Variables(JUnitQuery.SimpleArgumentInput(min = null, max = null, newName = "blah"))
    runBlocking {
        {{^requestHeader}}
            val response = query.execute(variables = variables)
        {{/requestHeader}}
        {{#requestHeader}}
            val response = query.execute(variables = variables) {
                header("{{name}}", "{{value}}")
            }
        {{/requestHeader}}

        val data = response.data
        assert(data != null)
        val scalarResult = data?.scalarQuery
        assert(scalarResult is JUnitQuery.ScalarWrapper)
        assert(scalarResult != null)
        assert(scalarResult?.count is Int)
        {{#customScalarsEnabled}}
            assert(scalarResult?.custom is JUnitQuery.UUID)
        {{/customScalarsEnabled}}
        {{^customScalarsEnabled}}
            assert(scalarResult?.custom is String)
        {{/customScalarsEnabled}}
        assert(JUnitQuery.CustomEnum.ONE == data?.enumQuery)
        val interfaceResult = data?.interfaceQuery
        assert(interfaceResult is JUnitQuery.SecondInterfaceImplementation)
        val unionResult = data?.unionQuery
        assert(unionResult is JUnitQuery.BasicObject2)
        assert(response.errors == null)
        assert(response.extensions == null)
    }
}
